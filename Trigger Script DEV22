#!/bin/bash

JENKINS_URL="https://dev-deployments.csnonprod.com"
TOKEN="xRPyRrQCDYxZdrYxcOAhxsyFG"
USERNAME="remoteuser"
PASSWORD="111ffb3b647ea5d22a81fd9897b25cd151"

#UI_Parameters
RELEASE="dev22"
BRANCH="qa-automation-refactoring-v2.0.0"
Env="dev22"
SLACKID="C08U47WQVR9"

#OrgAdmin
ORGADMIN_RELEASE="default-OrgAdminSanity"
ORGADMIN_BRANCH="OrgAdminSanityReports"
ORGADMIN_ENV="Dev22"
ORGADMIN_XML="OrgAdminSanity"


#API_Parameters
CDA_ENV="Dev22"
CDA_OPTION="CDA_FULL_SANITY"
CMA_ENV="Dev22"
CMA_OPTION="CMA_BASIC_SANITY"
SEARCH_ENV="Dev22"
SEARCH_OPTION="SEARCH_FULL_SANITY"
SEARCHVARIANT_ENV="Dev22"
SEARCHVARIANT_OPTION="SEARCH_VARIANTS_SANITY"

# Credentials
CREDS=c2FuaXR5X3VzZXI6djJoM2x4VjcwRENsMDFQTHJWbG9id2Mx
#CREDS=cHJhbmF2OlByYXBAMTk5NQ==

#GoCDPipelines
RTE_PIPELINE="dev22-rte-full-e2e-sanity"
# CLI_COMBAINED_PIPELINE="cli-GCP-NA-production-sanity"
GRAPHQL_PREVIEW_PIPELINE="graphql-preview-api-dev22-sanity"
RESTPREVIEW_PIPELINE="rest-preview-api-dev22-sanity"
TIMELINEPREVIEW_PIPELINE="preview-ui-dev22-sanity"
LIVE_PREVIEW="dev22-livepreview-full-sanity"
VISUALBUILDER_PIPELINE="dev22-visual-builder-sanity"
AIASSISTANT_PIPELINE="dev22-ai-assistant-e2e-sanity"
BRANDKIT_PIPELINE="dev22-brand-kit-e2e-sanity"
AUTH_PIPELINE="dev22-auth-sanity"
WEBHOOKS_PIPELINE="dev22-webhooks-sanity"
ARGUS_PIPELINE="dev22-ARGUS-basic-sanity"
GLOBALDASHBOARD_PIPELINE="dev22-globalDashboard-sanity"
LAUNCH_PIPELINE="contentfly-management-service-dev22-deploy"
DEVELOPERHUB_PIPELINE="marketplace-ui-dev22-deploy"
AUTOMATION_PIPELINE="dev22-automations-ui-deploy"
PERSONALIZATION_PIPELINE="personalization-ui-dev22-deploy"


#Triggering RTE Basic Sanity - UI
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$RTE_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "RTE Basic Sanity - UI triggered successfully"


#Triggering Search Variants Sanity - API
curl -X POST "$JENKINS_URL/job/cs-qa-Search-FullSanity-Runner/buildWithParameters?token=$TOKEN&Environment=$SEARCHVARIANT_ENV&Option=$SEARCHVARIANT_OPTION&Retry_Failed_Sanity=falserue&Fetch_Report_Only=false" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "Triggerd Search Variants Sanity - API Successfullly"


#Triggering OrgAdmin Sanity - UI
curl -X POST "$JENKINS_URL/job/cs-qa-OrgAdminSanity/buildWithParameters?token=$TOKEN&release=$ORGADMIN_RELEASE&branch=$ORGADMIN_BRANCH&environment=$ORGADMIN_ENV&xml=$ORGADMIN_XML" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered OrgAdmin Sanity - UI successfully"


# Triggering 1CT Sanity - UI
curl -X POST "$JENKINS_URL/job/cs-qa-OneClickTrial/buildWithParameters?token=$TOKEN&release=default-release&tag=OneClickTrialVenus&env=dev22" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered OneClickTrial Sanity - UI successfully"



# Triggering Assets Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Assets/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Assets Full Sanity - UI successfully"


# Triggering Full Sanity - UI 
curl -X POST "$JENKINS_URL/job/QA-Venus-UI/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Full Sanity - UI successfully"


# Triggering Search Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Search/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Search Full Sanity - UI successfully"


# Triggering Taxonomy Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Taxonomy/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Taxonomy Full Sanity - UI successfully"


# Triggering Variants Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Variants/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Variants Full Sanity - UI successfully"


# Triggering Extensions Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Extensions/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Extensions Full Sanity - UI successfully"


# Triggering Releases20 Full Sanity - UI
curl -X POST "$JENKINS_URL/job/QA-Venus-UI-Releases20/buildWithParameters?token=$TOKEN&release=$RELEASE&tag=$BRANCH&SlackChannelID=$SLACKID&env=$Env" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "triggered Releases20 Full Sanity - UI successfully"

# Triggering CLI COMBAINED - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$CLI_COMBAINED_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "CLI COMBAINED - Sanity triggered successfully"


#Triggering Rest Preview - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$RESTPREVIEW_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Rest Preview - Sanity triggered successfully"


#Triggering GraphQL Preview - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$GRAPHQL_PREVIEW_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "GraphQL Preview - Sanity triggered successfully"


#Triggering Timeline Preview - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$TIMELINEPREVIEW_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Timeline Preview - Sanity triggered successfully"


#Triggering Live Preview - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$LIVE_PREVIEW/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Live Preview - Sanity triggered successfully "


#Triggering VisualBuilder - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$VISUALBUILDER_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "VisualBuilder - Sanity triggered successfully"


#Triggering Auth - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AUTH_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Auth - Sanity triggered successfully"

#Triggering Webhooks - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$WEBHOOKS_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Webhooks - Sanity triggered successfully"

#Triggering Argus - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$ARGUS_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Argus - Sanity triggered successfully"

#Triggering Global Dashboard - Sanity
curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$GLOBALDASHBOARD_PIPELINE/schedule" -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -H "Authorization: Basic $CREDS" -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
echo "Global Dashboard - Sanity triggered successfully"



#Triggering Contentfly - GCP NA - Sanity
#echo "Getting the latest instance counter for $LAUNCH_PIPELINE"
instance_counter_launch=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$LAUNCH_PIPELINE/history?page_size=10" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.pipelines[0].counter')
#echo "Latest instance: $instance_counter_launch"
curl --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/stages/$LAUNCH_PIPELINE/$instance_counter_launch/sanity/run" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v2+json"
echo "Contentfly - Sanity triggered successfully"


#Triggering GCP NA - Developer Hub - Sanity
#echo "Getting the latest instance counter for $DEVELOPERHUB_PIPELINE"
instance_counter_DeveloperHub=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$DEVELOPERHUB_PIPELINE/history?page_size=10" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.pipelines[0].counter')
#echo "Latest instance: $instance_counter_DeveloperHub"
curl --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/stages/$DEVELOPERHUB_PIPELINE/$instance_counter_DeveloperHub/sanity/run" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v2+json"
echo "Marketplace - Sanity triggered successfully"


#Triggering Automations - GCP NA - Sanity
# echo "Getting the latest instance counter for $AUTOMATION_PIPELINE"
instance_counter_automate=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AUTOMATION_PIPELINE/history?page_size=10" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.pipelines[0].counter')
# echo "Latest instance: $instance_counter_automate"
curl --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/stages/$AUTOMATION_PIPELINE/$instance_counter_automate/sanity/run" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v2+json"
echo "Automate - Sanity triggered successfully"



#Triggering GCP NA - Personalization Service - Sanity
# echo "Getting the latest instance counter for $PERSONALIZATION_PIPELINE"
instance_counter_Personalisation=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$PERSONALIZATION_PIPELINE/history?page_size=10" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.pipelines[0].counter')
# echo "Latest instance: $instance_counter_Personalisation"
curl --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/stages/$PERSONALIZATION_PIPELINE/$instance_counter_Personalisation/sanity/run" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v2+json"
echo "Personalization Service - Sanity triggered successfully"


# Triggering CSI AI Assistant - E2E
pause_status=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AIASSISTANT_PIPELINE/status" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.paused')
if [ "$pause_status" == "true" ]; then
    echo "Pipeline $AIASSISTANT_PIPELINE is paused. Resuming it before triggering."
    # Unpause the pipeline
    curl --silent --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AIASSISTANT_PIPELINE/unpause" \
    --header "Authorization: Basic $CREDS" \
    --header "X-GoCD-Confirm: true" \
    --header "Accept: application/vnd.go.cd.v1+json"   
    # Trigger the pipeline
    curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AIASSISTANT_PIPELINE/schedule" \
    -H 'Accept: application/vnd.go.cd.v1+json' \
    -H 'Content-Type: application/json' \
    -H "Authorization: Basic $CREDS" \
    -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
else
    echo "Pipeline $AIASSISTANT_PIPELINE is not paused. Triggering directly."   
    # Trigger the pipeline
    curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$AIASSISTANT_PIPELINE/schedule" \
    -H 'Accept: application/vnd.go.cd.v1+json' \
    -H 'Content-Type: application/json' \
    -H "Authorization: Basic $CREDS" \
    -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
fi
echo "AI Assistant - E2E triggered successfully"


# Triggering CSI Brand Kit - E2E
pause_status=$(curl --silent --location "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$BRANDKIT_PIPELINE/status" \
--header "Authorization: Basic $CREDS" \
--header "X-GoCD-Confirm: true" \
--header "Accept: application/vnd.go.cd.v1+json" | jq -r '.paused')
if [ "$pause_status" == "true" ]; then
    echo "Pipeline $BRANDKIT_PIPELINE is paused. Resuming it before triggering."
    
    # Unpause the pipeline
    curl --silent --location --request POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$BRANDKIT_PIPELINE/unpause" \
    --header "Authorization: Basic $CREDS" \
    --header "X-GoCD-Confirm: true" \
    --header "Accept: application/vnd.go.cd.v1+json"
    # Trigger the pipeline
    curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$BRANDKIT_PIPELINE/schedule" \
    -H 'Accept: application/vnd.go.cd.v1+json' \
    -H 'Content-Type: application/json' \
    -H "Authorization: Basic $CREDS" \
    -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
else
    echo "Pipeline $BRANDKIT_PIPELINE is not paused. Triggering directly." 
    # Trigger the pipeline
    curl -X POST "https://gocd-yxq6yfhia1nz.contentstack.com/go/api/pipelines/$BRANDKIT_PIPELINE/schedule" \
    -H 'Accept: application/vnd.go.cd.v1+json' \
    -H 'Content-Type: application/json' \
    -H "Authorization: Basic $CREDS" \
    -H 'X-GoCD-Confirm: true' > /dev/null 2>&1 &
fi
echo "Brand Kit - Sanity triggered successfully"


#Triggering CDA Basic Sanity - API
curl -X POST "$JENKINS_URL/job/cs-qa-CDA-FullSanity-Runner/buildWithParameters?token=$TOKEN&Environment=$CDA_ENV&Option=$CDA_OPTION&Retry_Failed_Sanity=false&Fetch_Report_Only=false" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "Triggerd CDA Basic Sanity - API Successfully"


#Triggering Search Full Sanity - API
curl -X POST "$JENKINS_URL/job/cs-qa-Search-FullSanity-Runner/buildWithParameters?token=$TOKEN&Environment=$SEARCH_ENV&Option=$SEARCH_OPTION&Retry_Failed_Sanity=false&Fetch_Report_Only=false" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "Triggerd Search Full Sanity - API Successfullly"


#Triggering CMA Sanity - API
curl -X POST "$JENKINS_URL/job/Runscope-cma-Sanity-Runners/buildWithParameters?token=$TOKEN&Environment=$CMA_ENV&Option=$CMA_OPTION&Retry_Failed_Sanity=false&Fetch_Report_Only=false" \
     --user "$USERNAME:$PASSWORD" > /dev/null 2>&1 &
echo "Triggerd CMA Basic Sanity - API Successfullly"


# echo "All sanities have been triggered"